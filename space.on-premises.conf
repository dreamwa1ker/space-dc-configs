ktor {
    deployment {
        environment = production
        port = 8084
        internalPort = 9084
        autoreload = false
        callGroupSize = 8
    }

    application {
        modules = [circlet.server.ServerKt.main]
    }
}

circlet {
    stackName = "On prem"
    type = "Docker"

    server {
        singleOrg = true
        features = [OnPremise]
        enabledFeatureFlags = [PROJECT_PARAMETERS_ANNOTATIONS, PROJECT_PARAMETERS_VAULT_INTEGRATION, GOTO_MENTIONS_NEW_MATCH_ALGORITHM, GOTO_SEARCH_PROFILES_FTS, FULL_TEXT_SEARCH_EXPERIMENTAL_UI, ADVANCED_SEARCH_EXPERIMENTAL_UI, ISSUE_CHAT_CONTENT, POSTPONED_CHANNEL_MESSAGES]
        enabledFeatureFlags += ${?EXTRA_FEATURE_FLAG}

        enableSqlTracing = false
        enableExternalApiTracing = false
        enableAutomationInternalsConfiguration = true
        enableActiveAppTracker = true
        dumpStacksOnExit = false
        httpApiTimeout = 60000
        dontFailOnLargeBatches = true
        rpcTimeout = 60000
        permissionCacheCalculationInterval = 2000
        dbCacheCalculationTimeoutMs = 60000
        pidFileName = ".main_app.pid"
        orgInitTimeout = 180000
        processMetricsEnabled = false
    }

    onprem {
        jetSalesURL = "https://account.jetbrains.com"
    }

    push {
        proxy {
            url = "https://on-premise.service.jetbrains.space"
        }
    }

    preload {
        defaultProviders = [PreloadSpaceFeedAdvertiser, PreloadGeneralChannel, PreloadAbsenceReasons, PreloadMainProject]

        preloadMainProject = true

        builtinAuthModule {
            enabled = true
        }
        admin {
            firstName = "admin"
            lastName = "admin"
            username = "admin"
            email = "admin@example.com"
            password = "admin"
        }
    }

    masterSecret = "zWx90PyoiBKBY5OdfhBWS75a1beYcHPaKBGWdjBQ5qU="

    db {
        type = "postgresql"
        schemaPrefix = "crclt_"
        host = "postgres"
        port = 5432
        port = ${?DB_PORT}
        username = "space"
        password = "spacepassword"

        postgresql {
            driver = "org.postgresql.Driver"
            url = "jdbc:postgresql://"${circlet.db.host}":"${circlet.db.port}"/spacedb"
        }

        pool {
            vendor = "hikari"

            maxActive = 96
            minIdle = 12
        }

        debug {
            similar_queries_count_threshold = 10
            all_queries_count_threshold = 100
        }
    }

    bus {
        engine = "redis"
        host = "redis://redis:6379"
        type = "single"
    }

    storage {
        aws {
            region = "eu-west-1"
            bucket = "space-local"
            endpoint = "http://minio:9000"
            accessKey = "space-access-key"
            secretKey = "space-secret-key"
        }

        elastic {
            enabled = true
            host = "elasticsearch"
            port = 9200
            reIndex = true
        }
    }

    audit {
        elastic {
            enabled = true
            host = "elasticsearch"
            port = 9200
        }
    }

    perf {
        client {
            enabled = false
        }
        elastic {
            enabled = false
        }

        riemann {
            enabled = false
        }

        prometheus {
            enabled = false
            jmx = false
        }
    }

    metrics {
        fus {
            enabled  = true
            config   = "https://resources.jetbrains.com/storage/fus/config/v4/SP/SPP.json"
            product  = "SPP"
        }
    }

    // Circlet as OAuth 2.0 authentication server
    oauth {
        rememberMe {
            // Remember me cookie TTL in seconds
            ttl {
                // If user checked remember me
                userLong = 2592000 // 30 * 24 * 60 * 60
                // If admin checked remember me
                adminLong = 604800 // 7 * 24 * 60 * 60
                // If user or admin unchecked remember me
                short = 3600 // 60 * 60
            }

            // Authentication session cache
            cache {
                protectedQueueSize = 100
                probationalQueueSize = 100
            }
        }

        accessToken {
            // Access token TTL in seconds
            ttl = 600 // do not use anything longer in production, potential security issue
            // List of client IDs with custom TTL for access_token
            ttlCustom {
                "circlet-ios-app" = 25h
                "circlet-android-app" = 25h
            }
            issuer = "https://jetbrains.com/circlet"
            // RSA512 key pair to sign JWT
            // Use circlet.platform.server.services.oauth.accessToken.AccessTokenKt.main to generate the pair
            rsa {
                // X.509 encoded public key
                public = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4tKwgz26qJ/NKgJr0GBRBTqi/4BeHyufPbtUoWHQUPgsEVKhiWcWo8l2C/qRZdB8Q0iDEHd0M16NLhSG/8yxDxeUZtUWfznJwKzh+F4XdTXwEuJg2yE4VjXVx212/aKbWzznKc9lPWcqQAmFcMuMjmKbeyCHJv3P8d5UXtMfHo6TE773toKcp0ZzTa6HLYgWQcMYVf7UMWSzfD1mr2IJwUm1aax1U4bfmlkXBVlCMJcvs4zkZvJLrxtjKPpu1svETO+KAQ28Gaf9EahtgI+RCOWZEgrI5jegW7t2snosNlaBrEFaW2nXvyLxCgxMtk2e51yOoHkppwLArsvCCN5lUi1vKD0loTZ3udsi2Ny9zdGFAECqxDiyz1EtNkUq+quBlnPSqAbkTd3Utr0svovRhWbn08TvDQ3tpP/NwJQXHakMDEbfKCDVpDWT3yJ4J3wiBm7GekggnNosB3hGZRmzyr9pU8pi/VE90rJltUc+5H0cEcLAFpfzD9jaOSyNICXa1i/+3ktfhnGCmcc4Zlg3zTf3DagJD5cr4aVP6NYzVFzUE8F5uVWuulxuQkItLahTIHRmqH1NGdS8le+nsX6H6V4V7Vs1IdVwRV9ye8ZEbERo6j50I4I7sn+6u3OMB8IJKyMSVSpix2Sq1CMs6l7MJc2kwWlPRXAWZNzTjYaH1U0CAwEAAQ=="

                // PKCS#8 encoded private key
                private = "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"
            }
        }

        message {
            encoding {
                // an example of 128 bit key for AES.
                // openssl rand 16 | base64
                key = "fLqNWOEO941b0BTrr5Uo2Q=="
            }
        }

        twoFactor {
            // an example of 128 bit key for AES.
            // openssl rand 16 | base64
            encryptionKey = "D3WLslwZ69c9aePlDG/pdw=="
        }

        // 128 bit key for AES.
        encryptionKey = "Ak6alSoELH/YhKT0RRUxbw=="

        // 2048-bit public/private key pair for signing/verifying outgoing messages to applications
        // Use circlet.test.framework.application.KeyGenUtilsKt.main to generate the pair
        messageSigning {
            rsa {
                // X.509 encoded public key
                public = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnrVCIS+z1kRLuWudhpJkPblw3tHyHoQrjLR4DAlC9JfybnKh94VTagYNVMZwYlrv8z1x7Y0ECpoznK6ydWxs7AHAqMdwJjuYe9RWEP3fcVTFrDe6JElTpMR8vfkIUQZStr1/HUxnrTK1uVafiBNpKAeC5ONRBns8E7o+W2SKpKq7bMyODMlcLG50PhPIhdfdtkAy6J60aFjsLNoU4p4VqodnKgcSEypcEltI5vbXzKnU56Uyx8ogPT6X/nADAgNNWTpZfyGW9FQAjzVR2nrcTguBHjlr2zHUaMdINeSjMMEYbNx6extqLPc7gAL460d/7UAAEna/VpreAP76nB8tB9hAqqUvPxiRh+zTzkNp44lpRjERmKUzquKxPm9Qx288Ej07OmTHa1lO2yr6GWq9jI1h3sjgJblGc+r8mghInZJ1X9Ke2L8+MU+EXH3GKXFxafltIHzJz2rgcQoYYeUs+3h+atMMBhgnmHI3oxo8IR1OlwrDfQ/qQK7CWiq3W2HFkZyXwz5Ctoanwru22HanMiCXmfpzQXZDPScGs8nkDaxJGgPo7KpZyflUPqxBSebGpwIv68Fxal388i9pN/QGlKUm1y4ceprmtIZ6gBLcTbLAFv94MM6gScFOf3AOMAnemHf+69ImCcgPOZmyXeoS2R/yEoyVh/pNW9i3/wDX3ukCAwEAAQ=="

                // PKCS#8 encoded private key
                private = "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"
            }
        }
    }

    limits {
        perOrg = {
            "totalMembers" = {
                softCap = 9000000
                hardCap = 10000000
            }
        }
        request {
            sessionTTL = 5000
            limits = [
                {
                    type = "bandwidth"
                    capacity = 1000
                    refill {
                        tokens = 400
                        duration = "1 second"
                    }
                },
                {
                    type = "bandwidth"
                    capacity = 10000
                    refill {
                        tokens = 10000
                        duration = "1 minute"
                    }
                }
            ]
        }
    }

#     license {
#         key = {{ .Values.space.license.key }}
#     }

    vcs {
        url = "http://vcs:8080"
        secret = "sJJFmVidEfrveYyiYImwpXLdJzgO7D+BEy4GSfUcfCc="

        identity {
            name = "Space"
            email = "space@jetbrains.com"
            secretKey_base64 = "LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQoKbFFjWUJHVGJYN2tCRUFDN3FIRE5RdTdGcFlLVnJjTTc4bnQ0czFYckI0M0FKaVliemNZQzRhWklWSGlCd1EwWApPMzBZSDJrUUdNU1FVZmUxZDJMOXBleVNxRjdGd1VOWlUrajBLUWZLMDROVndmNjdSV1doMTRycXdlNHRCNG9hCmFJdks1MW9wWUxjSTdjZ29sVVROM0NXUTRmblRXZHQreUhYQjBaNzV3aGN0MDd6SWVrTTk1WUtmaXdSaityd3MKSG82MjU3dWhtWnZ5endJUFNoaCtaUXp6VGMzMHhsUFlUNjU2TmR0VytyMFloQWJJMmg1ME81NC9NWDl1VVhjYQpmbkQ5R1d1QmdQQi9BVHJKZTErbWVtTnNJSDR6TnFWZUoxVDRiYVJlTllSWWxZaVFsdEt0TUE1WnJCTmxiNlZkCkFDa2NVTFpQOXpaK3RicEcrU3ZXd0d4Szg3djh1dElVclNhMkJNaGVJU0o4azlqcjZrcE9qWkFkYy9tampGNGoKOTFUUEExMzN2ajJvMk9rVE9jUm0zaisxeitOUG44NVZvVzdrT00yNXYyeGJkZFFCdHRxeEJYTExERFdaUkdDQgp3ZU1yckJ6U0dvVFFsVVZpRlorbU9BUDhTV2sxWlFYZTNEdTNyUmtRVEd4YU9GbVc2Z3lSa2JxdGMrcitqSmNRCnZ0dEdhVDdZREpLRGlyeHN1eUdGZkVzY2hUT3pmb2Nleit6VHV6a2pHSUlMTVROck5IRS80VElEMWx0NzV6UFkKcjEwTmdYKzVSVlZvTUFKYmE2WHRzL1VpQWY0VEhoOHo1OTAweThlUkt1L0xER01ZMEZ0WDVEWDk2eWFnKytZRgpHSm9mTmtMZnk4cno3OWZNakhQeDRqdnM1YVJrOG5zeXhCQW12VFR4eTgrR0YySWF3UEJqcmtDSUZ3QVJBUUFCCkFBLytQbTQwVU9WaW9GaUcwQnNGNTZ5dERTUEVnck41b2lKTzdWTVEvQ1pyOW9ZN3JSYzNyckg0MVF5bUhGZlIKRlI1ZjVYdzViNTlDekN1OWs5Yk8vQ25oUjFGYktVd2kxbVg2dy95N2FoTldRUEdSdG1OYXU1eHFYVytJWEZtegpxd0hJWkUvOG11d1JoMWpXajB6R3JEQXVsUE9UQ3c1YVBjSENmWVBIV1JGQTJxa2FKZFRsdzF2TEtPaUJVS3JVCjZmdWFlTkd5d21JRjQrL1BoQTV6R0hTeDNEQ01yeXd0dXJrNXRKcDBKVUVzVFdPL1BFbFg4WFY5UzRhb2NHWWcKSEhDaFNTU0ZWdEpDdjFjMEJQKzZGay9KZ2ZpZ0JVT1NxeEhjWkJYNU11clk2MVpIQWFrWi80MnRINkZ1ZGI0Tgo0Q3UvTkJ0elRUZXBEMnAwOFFpS0daemRVb0NFeWFtdXRtUWVEdHlUcnJ3bStUT2QyM1J3VGpVVlRaMGMwOXRjCkd2ZkFPYVRqOVVwWXRPNlZuMkpDVFZ1VzhzWHNqcFI2aDhSWVArMERoZjRaZlVhNlUrT0FHTitxMlhpRjV5aXcKWXAwWm5MR0t5MW5yR0NPbTdmYkxidnI5OE9BYU1TU3VzQXlya1RaUWRKcU1JZHNuRVhpb0Yxd2ZpRTh4bWNBRgpvR041REo5Ynk5NDVLOHRTMXdmamwyUVMrRElLekdsODg0SW51YzRUcHVkUUE1bXN1Z2pwL1g5eG82ZFM1eE5WCnd3Mmt6Mmt6UG55ZzJoQnRHTHFqamtmWG41S1VxbmtpNzFQbDJGaVhoQURVTDFkSVJZOUg5ODJFSUJNazUza1kKRUFycjVNeGx2a05FbFVZTGs1TUhoN0hkTzdCanZVaFdSMjJDT0xUZTJIYmVBakVJQU1vT3pWTXkvdWRZMnlDKwpjUmxQa1dkVDhYb1ROdDlIN2VsYU9QcitITGxDaFpzVStyWGg0VUcxalhQU3lYYXc4QmF6dTVEdC9CR3BGWDlICm5xSVNkZXV5YVphU1A3a0lsYndRUTlvWDFUdXpGNXNGODNkU1BnYWJvSkpWYmhkekJSQlZxSk5QNjJueG9sY3YKMkRLSFFkQk9LTjc4OFVpTDIzdEZEOE9SVXRzV2NPNVpMUXptUThxTENZMjN2K1dDVUlVTi9sYlVVR2MwZjhZMgoxNHJIRTZ3aTh3dlI1WUpYN1NEZlFpNEJJb1FYaWxZMHhRK3U0eEw5ejJ2QVF5UDNwb0ZkRG9zWjdWTGtIbGZ0Cjk1ZlRlei9HZ29pbVBVaEF3dVkwQWhHTldFNVVZTTFYQkprRlY1T3lCMS91VVNYa1B5VEpnK1RKR1Z0N3B4NngKQzFJaFdIa0lBTzNCZ3pQRzQwOXVqQ2pZZ29xbGlCWHBIVTJhRVdybmMzRmR3WUlNVUxtZFd0OHBtanBPdlR1OApNZTNIb1krdUhDOWFrN1dSRE91aEV3VUlwck1WYmRjZTl4eENHR0RsRjd4U3hncFRnczVRaDNsbG96N2MvNHZ6CnFkMzAxbC9wNUhwZkpEOERYaTBWRXM4M3FidHU5L2hnSEs2bTlNZCtBNytjRFBRei9hZ0k1SlVLYjRyTVV3TFcKa2FhU3JQY2p2a3R4dDJlUjhBTVVpVVlnSkYzTjJYN29rUTZIUDNHTnR0aGlOUUhWR0dvL3BnRUtFbkNrbmF3cQpvRDhUNDhaQ0Erb29DbnpVUm9yL1pIR3djc21HQnNlRFBWanJJcEhybXhkazBZUXdMNC95NWVQVmhPRmlpWUF5CndxamhwWDhwdk54WjJDbUN1UnBzWlcvdHVkMWE0UThILzBDaXNON0FLaGxUVjZTWTN2Q2xFVmIySklwSEtLVzAKekZSS2Z5Ly9jSEtocUZVN3B0MGIrMlAzM1pPUmUwZDlPMm9BL20vUUY2ZGhtd0NyK0Nhd3c2R3I1YnNhNU44dgp1Si9CTWY1MnowYmJITW1URjV4b3M4QWNQTUZlTi9oeHVnbE4ybFJwQnBielJzekt6UVpFTmhicXowSzU2cFd3CmhyS1IzNUI2UE1VY2N6UDJZaUN5TFJDRHFFQi9Bck10ZEorTWJRaVhKU2V0SzBjMndkNXlxUTd1a3VRVFBrUSsKOVVqd0VBSEFBb2U1NUptWFIzYVFEK2RTTEdTY2xsc2xIOTdaL04rTW91NXBmWTZYN29wU2x6OVFSUG1XbWRPbgp3ZWNSTnRFcWlDRnA1aEZYb2pKTDZjUFJLY09IdDZ1REY0dmRPMGIyNVo5TzJNRGNoelpXZW9SKzJiUTBVM0JoClkyVWdLRk53WVdObElIQnlaV2RsYm1WeVlYUmxaQ0JyWlhrcElEeHpjR0ZqWlVCcVpYUmljbUZwYm5NdVkyOXQKUG9rQ1RnUVRBUW9BT0JZaEJKbys3bENkQTV4SXlVYUo5c2hqYkxaVUJvbzdCUUprMjErNUFoc3ZCUXNKQ0FjQwpCaFVLQ1FnTEFnUVdBZ01CQWg0QkFoZUFBQW9KRU1oamJMWlVCb283TE9BUC8xdS9TeHZnQm40UVFFc1FTeDd0CnZBclR2SmlSR2pNbVRRTFFldlpUNzJhUVcwTC9OUDBSMS91enhSZ3M3TjBpT0k5YTNpSWd6aTdqR2tjcVVCeHkKWEY0VTVkMEVDYnRKeW5ucU1xcGpTVGxINjRNdzloaG5rdjN4Qkw2d3Z5dnE1NDdMZTU1ZVVXeC9vcUtwM1N6eQoyMHVWT3VZc1YwdS9INXdkWW1ZUEtxK0Zacy9FUlRWZ2RUZmZsRTV5UGxSSC9ibldmMmU2bW8zL3QvOVdJQXdLClV0dUliZmhxbnNhbTcyYVUvL051RjhPcFZaeVpMT3hyK3BTYkd4RTN3M1RMTlRXTThGcE9Wd1hHY0lhRkxhZWgKOEpJR1FUcGlMNGFKQUNsZnpScjh1Rzh0ZmQ2dHByYzhoRTAvdXhPQ29KTXVBcHNhQVZxUHNBalk1VDgraVJzTwp3VUVCb0h1ZmRacEZONWdCZkNKS2xoTzJhU0djN29NeVMxV2krblNUVWc0dzY1RmpQNXJjU011S3pZU29VV1VTCjZPbnNsS1YzK0NMdk5sSlVNcnRXbmdGb1lXOEs2cjl6WGY1VHFYaVZ3Yyt6S3JrbG93TURxL2ZuTHlOa0pYTkwKR0NxazdtbE9ZWVRsSncxQ3M2aW0wY1JIUUpYa25xUUtLZk1lMlViWU9VS3VmTWVDblhvZ254SXJWS1lodmE0dApSZEZUWG5BS2VIZkxYZGVpSzVPRXRtWU9kL3BwZGwzejExeURITFhidTZXZE1LaUtwY0tPWmQxUVhXcWJYeEE1CnJ6VHliUlpWUThoM3NvS0FiemhpTTZKQnFMK0tockI2RktwM2NxRFRBc080UzJQeFp3NjRLOUh4MFVNelB2OXoKTlN2NFVXWjA1cVNQT2V1VkhKNktZM1BGblFWWUJHVGJYN2tCREFERWd2R0pyTExTOGhNTVZ2WXBiZlc4RmY1LwpDUUF3Qk12cVhTU3laVUR5RUpldkVQdVFMdFV2WGN6UFRjb2M2b0c1TFhzL2tBOEI4c1BRS0JCVzVaaGt4cWlECnZOVXhBODlGNEZ4dzJjMEQyTFNSb2hiV2wzWE04eUg5dldGb1l5UUFlZXdkNTAyWlZqalIrRXB1eVdKSmgyeFcKZmg1alFlb003YWszSTJEK1B3d01PdnZaSFdvSVNLWnd3a0JLTHRHeDZXbGwzN1ZPM0xheGVsaXNXTjVkMFdtdApVZVFVcklEcUVPSEk1RHo1bVhULytKckhMVkJSVWVUMDVEOENvZWVQbkhMK1piY1F6YU9CNGpoaFRodDE5dG9DCnhpWkgrNTRNL1haU3ZHcUdvQnZNcTh0ZmNzQytjU2VTUmU3L0tkNUZyOGZIeWVCcHAzNC9QbEc0Q3NYYWR0UVMKaWVtN2VXRmhtOXZ1aDRWV1NxRlJ5QXcrUm9XRzgySDIzc1JBQnR3bCt0VzJLYXZrTGc2K0pNUnBaWHNxdFFZcgovOS9PaGpDNTdJc0V6UG1laGVkeU40WlR5a09WeGhRNVBUb2FxQ1VEMmw4MEJGQ0d5eXhENmhoRWhrcjJCZDN2CkVNNlZGUDN5b2xvbmJ0VUp5OFhBRlAyZzhndWZOeWlLVmxUNUZ6TUFFUUVBQVFBTCtRRjI0MGlOS0pidTF5MVMKYzhFNFpsbGVuaDUwYUhPZ1ZRMit1cGg4TlRYV3RIWnZCT0J0ci9tcGVkZmR3YzBIVGY5S3R5YkxCWWlxK2lSSwpPMitIREJIVDh5azlHZ2tHVTFUVlczUm9iSU1URjBGalpobmdad01CNUQxSFJhLy9mRzVYNDZvOHk0ZVJReS9JCmNOemFFL3Z0d3M1cmZsdlUwcGUzRWtUMFBtU0hsYzZMd3MyelhkcnlBY1VxZGx0TndPWEM1UlpURGwyQ2QwTGoKdTVxckVvUndvODBjcEk1amVQQjJpaWU2cHpoZ21UdDF6UVVCWHZFUGZYQUpLaHJzNHl0UFlLQjFleVcvUk5UYgpES2xDLzBLV3RWMGpHVldRM2s1Uk9ZRUNpLzFlQkh6TG1QSEJsNVNlMTliaTFzcWhFRHI1MG1nMHNidWhhN1RCCmh6aWJsZ29xUjdVd2V2U2hqRnBrKy84Ymgwc0lLMkJ0N0FyRXQzVGplWHFXalpiOEpLOWk5OFNoS0tWV1VoWHAKZlBXVUdOS1pERGNpSkpJV3E5RTZrMnNEYlY5S3VQZnM0YUZyb3NPV0dsOFZWSWw2TEsyNzFUN3hoTVQ3VDVxegplN1NaYURHLytGRHRvYm40SVBKMW1iMFlGZEtrVVExa2VzcXIyWnlkdlFmMWNzYXRvUVlBell4NE83YVZRenE4CkkyaU9jSWs5TjRiS3lTV2llK29tbHZJWGVjZVhzL0E5Ny93cm5RM2ZPMnpteGpxd0dXQVBaeUZCOVZOZ1BUcU0KSjYyVnoxWEE0ZU5CRnl2OVNmazc1bFVOMllWUzF3QlVLWDY3TWRlSk9RbUpNV3ZWd1RHNnV6VDJQUlVPY1E4agp0L0hjTXVrU09nWklBWU0rU2t4YU1oNEk2VW9HeHo5bFVZbytwTzh0RUNjd2tzbjZPVU4vSTZvakxxNm9STkswCkJPV3ZtelFxdTRSakQ4Wmd4Q2xLUWt0cWQyOFBlUmlOMVU2ZDhBU0kzZHpKQ1F0RVVvY2hCZ0QwdnFCRmFRMVYKT2R3b1FSY0IxRzJMN01NUm04UVhvUDFLcVFiQlA4Z0hwQWFCeWZRK2p5bTB6ck10NVJhQmw0ZVhXVTJGRzlXVgpVZFhzekl4NkFZRE95R1hiVnZEWExJaGRtMXpyUnViRWxDS2hzWFZSU2dsS3dod0V1QnR1ZmR1bm13SnpEMW9yCi9ScExVakdydzhmdUxRZDhyQjNMbW5taU1lcmRvYXhORHVhOUpXVlBnQ04rblN0Vmt4bUlBSTVPRDBDdm9hRDMKSEFtN0FGOU9hTUltQ2M4aUtwYTU2dFlOc2hZQk4wVTQveHQwbmduc2tFNGJ2cDFVK3VHWDE5TUdBUEFvZDRiVwp5QS9TcDdSbDZGRFh3Z0hmTGF0MkhrZ1FxYzh4VlhhckpuL1JhMml6MXlRTkNzb1RZMWtkdWRkcFk4cEM3Nk5SCnFnMDFWK3g2Q3JtNkpVMWloQ1lwRHdYLzBmb1gwL3pWSU5KTFVGajc3UlZvMStJZVdVV0N6TUNFcG96S0dsT1oKdG1lWENBQ3NobVJrRWt4QjU2NWNZNFVUYU5OYTJhMXBRdGY3bCtza0c5Y05NMUJwTXpzSnNqb1oxWlM5WEVnLwpVT2pOdFFZYVZmZ3lxVUoyR3VETmVnZHRNUGJhWmhKcVRSY01UY25QQUk0MmtBSDk1NnVDeG5CWVNzNTBpUUkyCkJCZ0JDZ0FnRmlFRW1qN3VVSjBEbkVqSlJvbjJ5R05zdGxRR2lqc0ZBbVRiWDdrQ0d3d0FDZ2tReUdOc3RsUUcKaWpzREF4QUFoeEJTZC9rQ2NJMHRqWUk2SWkwVXhwT2xvZEMrdEdWUWhQa3Npb3VoRjBjL0JxMSs4VVJIbkFIQQoyLzBrT3F2VUpQUlB0RWQ2NFZMd2lvSHpRMnpTRU95MnQzTW9qOTRPcXV3b2ZMQ0QwaDgwa2YwSXRQM3RnSHVDClpVcUxkRStvNHNlQmtmMVhLTXVEYVM0TzQ4ckZ6N2YrVlAzcG5FRitFT2Rybjl3NDlGUXg5bkphcnZuVVVrZUgKVHJLQUxYN2FKc0RjeUN2ekRhRzM5TnRUTVFrc2MxYWZnNDhyQWF2QkFCWlN3djJKM09ISnp1ZlNtT1ZLVERFOAp6aUpsN2RwWndROGVBSFUvREdjR2YwTDNGdTB2WTVDaUU4ZnpPUWkrQUs1dXdTdXlmSHdyZDlwZmJNaFdPWmwrCnlUbHhha3hLdzh5eUZnWTVGUXRyNzl2d1lpdG1FYkFHS2JSTnM2dVR0K0diaEJiaFBmOEYzcnkyd0xEenE5NmQKSGVobDk1dHRnaWkveS8walJyelVvcWl6NkUzYVIrZ3hoWmlWUXJ4UURRZi9ZSmRYWkVVUjZZR2VnSTF1djBmNQpqSkU2RWQ0aFpZa0xCZG8rckVuZTdEQXE0V21EclNUNGpteW03MURGYmJNSkdZMXZSZmtmS3dSalBEUjRieVVjCktzZ1lFdlVEekFRSEg3TlhmNk9pa0RrZk9teTBMZDVZZS9xbzlFdVUxR0czcGlrbmVMaDh2NTJjbkRWa012Tm8KeVcvNnF5b1E3NE40WFNMT1NwdERvdzlVdi84cjljeTFtT2xIUXVPcXhtaWhxUjkycVRDYXhZY2xpYS9wNUs0SwpyV3NGZWpBN2pBQUFPa09GbmRIMmxFNE5TRXdtWURtZ0FEazdNSFJhREkxQ1ZUUzVjSk09Cj1yVVQvCi0tLS0tRU5EIFBHUCBQUklWQVRFIEtFWSBCTE9DSy0tLS0tCg=="
            passphrase = ""
        }
    }

    mail {
        outgoing {
            enabled = false

            // SMTP settings
            fromAddress = "space@space.example.com"
            host = "mail"
            port = 25
            protocol = "SMTP"
            login = "space"
            password = "space"
            messageQueuePrefix = "mailQueue"

            // handling properties
            aggregationDelaySecs = 900
            rateLimitPerSecond = 3
        }
    }

    endUserAgreement {
        jetBrains {
            enabled = false
        }
    }

    frontend {
        url = "https://space.pavelboger.com"
        internalUrl = "http://space:9084"
        internalALB {
            enabled = false
        }

        // Alternative URLs for Space
        altUrls = [
            "http://127.0.0.1:8084",
            "https://localhost:8084",
            "https://space.local:8084",
        ]

        enableWebdriverTestIds = false
    }

    healthcheck {
        username = "healthcheck"
        password = "healthcheck"
    }

    webhooks {
        key = "MGsrLIcRH8guVXfUqcak5ohj4L4kVfSzS3PTVi2Nm20="
        // Possible options are "Java" and "Apache", unknown values fall back to Java.
        client = "Java"
    }

    unfurl {
        // Possible options are "Java" and "Apache", unknown values fall back to Apache.
        client = "Apache"
    }

    // external language server. This implementation implies syntax highlight only
    // `client` should be one of `net` or `local`
    language-server {
        client = local
        engine = Java
        host = langservice
        port = 8095
    }

    pipelines {
        dsl {
            compilation {
                image = "public.registry.jetbrains.space/p/space/containers/space-automation-dsl-compile:2023.2.0.128"
                storage {
                    aws {
                        region = "eu-west-1"
                        bucket = "automation-dsl-local"
                        endpoint = "http://minio:9000"
                        accessKey = "space-access-key"
                        secretKey = "space-secret-key"
                    }
                }
            }
            runtime {
                mavenRepo {
                    url = "https://maven.pkg.jetbrains.space/public/p/space/maven"
                }
            }
        }

        execution {
            type = "docker"
            backends = ["worker"]

            # TODO remove when space container is updated
            bootstrap {
                image = "671090787922.dkr.ecr.eu-west-1.amazonaws.com/automation/alpine/git:v2.30.2-jb"
            }

            worker {
                image = "public.registry.jetbrains.space/p/space/containers/space-automation-worker:2023.2.0.128"
                # workers won't be updated after installing new on-prem version
                initialVersion = "default"
                dockerBuilderImage = "public.registry.jetbrains.space/p/space/containers/space-automation-docker-builder:2023.2.0.128"
                dslCompileImage = "public.registry.jetbrains.space/p/space/containers/space-automation-dsl-compile:2023.2.0.128"
                extraNetworks = ["space-on-premises_backend-data"]
                extraHosts = ["host.docker.internal:host-gateway"]
            }

            terminateLongExecutions {
                maxPendingDuration = 6h
                maxScheduledDuration = 30m
            }

            fileshare {
                storage {
                    aws {
                        region = "eu-west-1"
                        bucket = "automation-fileshare-local"
                        endpoint = "http://minio:9000"
                        accessKey = "space-access-key"
                        secretKey = "space-secret-key"
                        s3Presigner {
                            endpoint = "http://minio:9000"
                        }
                    }
                }
            }
        }

        serviceMessages {
            storage {
                aws {
                    region = "eu-west-1"
                    bucket = "automation-logs-local"
                    endpoint = "http://minio:9000"
                    accessKey = "space-access-key"
                    secretKey = "space-secret-key"
                }
            }
        }

        blockstorage {
            engine = "local-docker"
        }
    }

    packages {
        internalUrl = "http://packages:9390"
        notifications {
            enabled = true
        }

        oauth {
            clientId = "space-to-packages-client"
            clientSecret = "6tySDrpq4rEHVp8DWXsVa087xxAXF7s2EnN2MBUdcfg="
        }

        types {
            maven {
                url = "https://packages.pbg-dev.online"
            }

            nuget {
                url = "https://packages.pbg-dev.online"
            }

            npm {
                url = "https://packages.pbg-dev.online"
            }

            container {
                 url = "https://packages.pbg-dev.online"
            }

            pypi {
                url = "https://packages.pbg-dev.online"
            }

            composer {
                url = "https://packages.pbg-dev.online"
            }

            dart {
                url = "https://packages.pbg-dev.online"
            }

            files {
                url = "https://packages.pbg-dev.online"
            }

            crates {
                url = "https://packages.pbg-dev.online"
            }
        }
    }

    attachments {
        useCdn = false
    }
}

